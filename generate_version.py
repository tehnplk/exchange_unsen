#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå version.json ‡∏à‡∏≤‡∏Å config.py
"""

import json
import os
import sys
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ import config
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import APP_CONFIG
except ImportError:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import config.py ‡πÑ‡∏î‡πâ")
    sys.exit(1)

def generate_version_json():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå version.json ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô config.py"""
    
    version_data = {
        "name": APP_CONFIG.get('name', 'ExchangeUnsen'),
        "version": APP_CONFIG.get('version', '1.0.0'),
        "description": APP_CONFIG.get('description', ''),
        "author": APP_CONFIG.get('author', ''),
        "release_date": datetime.now().strftime("%Y-%m-%d"),
        "download_url": "https://github.com/tehnplk/exchange_unsen/raw/master/ExchangeUnsen.exe",
        "backup_url": "https://github.com/tehnplk/exchange_unsen/raw/master/dist/ExchangeUnsen.exe",
        "changelog_url": "https://github.com/tehnplk/exchange_unsen/blob/master/CHANGELOG.md",
        "repository_url": "https://github.com/tehnplk/exchange_unsen",
        "minimum_version": "1.0.0",
        "update_required": False,
        "notes": [
            "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
            "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
            "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        ]
    }
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå version.json
    try:
        with open('version.json', 'w', encoding='utf-8') as f:
            json.dump(version_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå version.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"üì¶ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: {version_data['version']}")
        print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {version_data['release_date']}")
        print(f"üîó URL: {version_data['download_url']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {e}")
        return False

def validate_version_json():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå version.json"""
    
    try:
        with open('version.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        required_fields = ['name', 'version', 'download_url']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå version.json ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {missing_fields}")
            return False
        
        print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå version.json ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return True
        
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå version.json")
        return False
    except json.JSONDecodeError:
        print("‚ùå ‡πÑ‡∏ü‡∏•‡πå version.json ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return False
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå version.json...")
    print("="*50)
    
    if generate_version_json():
        print("="*50)
        validate_version_json()
    else:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        sys.exit(1)
