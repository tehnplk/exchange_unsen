#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö auto-update
"""

import sys
import os
import subprocess
import time
import tempfile
sys.path.append(os.path.dirname(__file__))

from auto_updater import AutoUpdater, DownloadThread
from PyQt5.QtWidgets import QApplication, QMessageBox
from PyQt5.QtCore import QEventLoop, QTimer

class FullSystemTest:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
    
    def __init__(self):
        self.test_results = {}
        self.app = None
        
    def setup_qt_app(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á QApplication"""
        if not QApplication.instance():
            self.app = QApplication(sys.argv)
        else:
            self.app = QApplication.instance()
    
    def test_1_basic_functionality(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("\n" + "="*50)
        print("üß™ TEST 1: Basic Functionality")
        print("="*50)
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á AutoUpdater
            updater = AutoUpdater()
            print("‚úÖ AutoUpdater created successfully")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
            if updater.check_internet_connection():
                print("‚úÖ Internet connection available")
            else:
                print("‚ùå No internet connection")
                return False
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
            import requests
            response = requests.get(updater.version_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Version data retrieved: {len(data)} versions")
                latest = max(data, key=lambda x: x.get('version_code', 0))
                print(f"üì¶ Latest version: {latest.get('version_name')} (code: {latest.get('version_code')})")
            else:
                print("‚ùå Failed to retrieve version data")
                return False
                
            self.test_results['basic'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Basic functionality test failed: {e}")
            self.test_results['basic'] = False
            return False
    
    def test_2_download_functionality(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"""
        print("\n" + "="*50)
        print("üß™ TEST 2: Download Functionality")
        print("="*50)
        
        try:
            self.setup_qt_app()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
            test_url = "https://raw.githubusercontent.com/tehnplk/exchange_unsen/master/README.md"
            temp_file = tempfile.mktemp(suffix='.txt')
            
            print(f"üìÅ Test download to: {temp_file}")
            print(f"üåê Test URL: {test_url}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á DownloadThread
            download_thread = DownloadThread(test_url, temp_file)
            
            # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•
            result = {'finished': False, 'success': False, 'progress_count': 0}
            
            def on_progress(value):
                result['progress_count'] += 1
                if result['progress_count'] % 5 == 0:
                    print(f"üìä Progress: {value}%")
            
            def on_finished(success, message):
                result['finished'] = True
                result['success'] = success
                result['message'] = message
                print(f"üèÅ Download finished: {success}")
                if success and os.path.exists(temp_file):
                    size = os.path.getsize(temp_file)
                    print(f"üìÑ File size: {size} bytes")
                self.app.quit()
            
            download_thread.progress.connect(on_progress)
            download_thread.finished.connect(on_finished)
            
            print("üöÄ Starting download test...")
            download_thread.start()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (timeout 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            start_time = time.time()
            timeout = 30
            
            while not result['finished'] and (time.time() - start_time) < timeout:
                self.app.processEvents()
                time.sleep(0.1)
            
            if not result['finished']:
                print("‚è∞ Download test timeout")
                download_thread.terminate()
                download_thread.wait()
                self.test_results['download'] = False
                return False
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    print("üóëÔ∏è Test file cleaned up")
            except:
                pass
            
            if result['success']:
                print("‚úÖ Download functionality works correctly")
                self.test_results['download'] = True
                return True
            else:
                print(f"‚ùå Download failed: {result.get('message', 'Unknown error')}")
                self.test_results['download'] = False
                return False
                
        except Exception as e:
            print(f"‚ùå Download functionality test failed: {e}")
            self.test_results['download'] = False
            return False
    
    def test_3_version_comparison(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô"""
        print("\n" + "="*50)
        print("üß™ TEST 3: Version Comparison")
        print("="*50)
        
        try:
            updater = AutoUpdater()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
            test_cases = [
                ("1.0.4", "1.0.3", True),   # newer
                ("1.0.3", "1.0.3", False),  # same
                ("1.0.2", "1.0.3", False),  # older
                ("2.0.0", "1.9.9", True),   # major version
            ]
            
            all_passed = True
            for latest, current, expected in test_cases:
                result = updater._is_newer_version(latest, current)
                status = "‚úÖ" if result == expected else "‚ùå"
                print(f"{status} {latest} vs {current} -> {result} (expected: {expected})")
                if result != expected:
                    all_passed = False
            
            if all_passed:
                print("‚úÖ Version comparison works correctly")
                self.test_results['version_comparison'] = True
                return True
            else:
                print("‚ùå Version comparison has issues")
                self.test_results['version_comparison'] = False
                return False
                
        except Exception as e:
            print(f"‚ùå Version comparison test failed: {e}")
            self.test_results['version_comparison'] = False
            return False
    
    def test_4_ui_components(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö UI Components"""
        print("\n" + "="*50)
        print("üß™ TEST 4: UI Components")
        print("="*50)
        
        try:
            self.setup_qt_app()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MessageBox
            msg = QMessageBox()
            msg.setWindowTitle("Test")
            msg.setText("UI Component Test")
            msg.setStandardButtons(QMessageBox.Ok)
            
            # ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            QTimer.singleShot(1000, msg.accept)
            msg.exec_()
            
            print("‚úÖ QMessageBox works correctly")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö QProgressDialog
            from PyQt5.QtWidgets import QProgressDialog
            progress = QProgressDialog("Testing...", "Cancel", 0, 100)
            progress.setWindowTitle("Progress Test")
            progress.show()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            for i in range(0, 101, 20):
                progress.setValue(i)
                self.app.processEvents()
                time.sleep(0.1)
            
            progress.close()
            print("‚úÖ QProgressDialog works correctly")
            
            self.test_results['ui_components'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå UI components test failed: {e}")
            self.test_results['ui_components'] = False
            return False
    
    def test_5_exe_integration(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö EXE"""
        print("\n" + "="*50)
        print("üß™ TEST 5: EXE Integration")
        print("="*50)
        
        try:
            exe_path = "dist/ExchangeUnsen.exe"
            
            if not os.path.exists(exe_path):
                print("‚ùå ExchangeUnsen.exe not found")
                self.test_results['exe_integration'] = False
                return False
            
            print(f"‚úÖ ExchangeUnsen.exe found")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            size = os.path.getsize(exe_path)
            print(f"üìÑ EXE size: {size:,} bytes ({size/1024/1024:.1f} MB)")
            
            if size < 1024 * 1024:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1MB ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                print("‚ö†Ô∏è EXE size seems too small")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô EXE (quick test)
            print("üöÄ Testing EXE execution...")
            try:
                # ‡∏£‡∏±‡∏ô EXE ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                proc = subprocess.Popen([exe_path, "--help"], 
                                      stdout=subprocess.PIPE, 
                                      stderr=subprocess.PIPE,
                                      timeout=5)
                stdout, stderr = proc.communicate(timeout=5)
                print("‚úÖ EXE can be executed")
            except subprocess.TimeoutExpired:
                print("‚úÖ EXE starts successfully (timeout expected)")
                proc.kill()
            except Exception as e:
                print(f"‚ö†Ô∏è EXE execution issue: {e}")
            
            self.test_results['exe_integration'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå EXE integration test failed: {e}")
            self.test_results['exe_integration'] = False
            return False
    
    def run_full_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Auto-Update")
        print("="*70)
        
        tests = [
            ("Basic Functionality", self.test_1_basic_functionality),
            ("Download Functionality", self.test_2_download_functionality),
            ("Version Comparison", self.test_3_version_comparison),
            ("UI Components", self.test_4_ui_components),
            ("EXE Integration", self.test_5_exe_integration),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå {test_name} failed with exception: {e}")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print("\n" + "="*70)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        print("="*70)
        
        for test_name, _ in tests:
            key = test_name.lower().replace(" ", "_")
            status = "‚úÖ PASS" if self.test_results.get(key, False) else "‚ùå FAIL"
            print(f"{status} {test_name}")
        
        print(f"\nüéØ ‡∏ú‡∏•‡∏£‡∏ß‡∏°: {passed}/{total} tests passed")
        
        if passed == total:
            print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö Auto-Update ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")
            print("‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏° Push ‡∏Ç‡∏∂‡πâ‡∏ô Repository")
        else:
            print("‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            print("üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô Push")
        
        return passed == total

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    tester = FullSystemTest()
    success = tester.run_full_test()
    
    if success:
        print("\nüöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production!")
    else:
        print("\nüîß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    return success

if __name__ == "__main__":
    main()
